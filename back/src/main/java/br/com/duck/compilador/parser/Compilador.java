/* Compilador.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Compilador.java */
package br.com.duck.compilador.parser;
import java.util.ArrayList;
import java.util.List;

import br.com.duck.compilador.recovery.*;

public class Compilador/*@bgen(jjtree)*/implements CompiladorTreeConstants, CompiladorConstants {/*@bgen(jjtree)*/
  protected static JJTCompiladorState jjtree = new JJTCompiladorState();
//  public static CompilationError errors = new CompilationError();
  public static List<String> errors = new ArrayList<String>();
  public static void main(String args []) throws ParseException, ParseEOFException, Exception
  {

    Compilador parser = new Compilador(System.in);
    while (true)
    {
//      System.out.println("QUACK QUACK FALA A BOA: \n- >");

      SimpleNode node = Compilador.Start();
      node.dump(" ");

      try
      {
        //Compilador.Start();
      }
      catch (Exception e)
      {
        System.out.println("Erro de quckila\u00e7\u00e3o: ");
        System.out.println(e.getMessage());
        
        Compilador.ReInit(System.in);
        throw e;
      }
//      catch (Error e)
//      {
//        System.out.println("Erro quacktal: ");
//        System.out.println(e.getMessage());
//        break;
//      }
    }
  }

  static public String im(int x)
  {
    int k;
        String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try {
      s = s.substring(1,k);
    }
   catch (StringIndexOutOfBoundsException e)
           {}
   return s;
  }

  static Token lastError = null;
  static boolean eof;    // variável que indica se EOF foi alcançado

  // o método abaixo consome tokens até alcançar um que pertença ao conjunto
  // de sincronização
  static void consumeUntil(RecoverySet g,
                         ParseException e,
                         String met) throws ParseEOFException,
                                            ParseException
  {

        Token tok;
        System.out.println();
        System.out.println("*** " + met + " ***");
        System.out.println("     Conjunto de sincroniza\u00e7\u00e3o: " + g);

        errors.add("*** " + met + " ***");
        errors.add("     Conjunto de sincroniza\u00e7\u00e3o: " + g);

        if (g == null) throw e; // se o conjunto é null, propaga a exceção

        tok = getToken(1); // pega token corrente
        while ( ! eof ) { // se não chegou ao fim do arquivo
          if ( g.contains(tok.kind)) {//achou um token no conjunto

                errors.add("     Encontrado token de sincroniza\u00e7\u00e3o: " +
                               im(tok.kind));

            System.out.println("     Encontrado token de sincroniza\u00e7\u00e3o: " +
                               im(tok.kind));
            break;
          }

          errors.add("     Ignorando o token: " + im(tok.kind));

          System.out.println("     Ignorando o token: " + im(tok.kind));
          getNextToken();     // pega próximo token       
      tok = getToken(1);
          if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
              eof = true;
        }
    if ( tok != lastError)  {
      errors.add(e.getMessage());
          System.out.println(e.getMessage());
          lastError = tok;

        }
        if ( eof )
          throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");
  }

  static final public void Semicolon() throws ParseException, ParseEOFException {/*@bgen(jjtree) Semicolon */
 SimpleNode jjtn000 = new SimpleNode(JJTSEMICOLON);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.semicolon;
    try {
      try {
        jj_consume_token(SEMICOLON);
      } catch (ParseException e) {
consumeUntil(sinc, e, "Semicolon");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Identifier() throws ParseException, ParseEOFException {/*@bgen(jjtree) Identifier */
 SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.identifier;
    try {
      try {
        jj_consume_token(ID);
      } catch (ParseException e) {
consumeUntil(sinc, e, "Identifier");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Assign() throws ParseException, ParseEOFException {/*@bgen(jjtree) Assign */
 SimpleNode jjtn000 = new SimpleNode(JJTASSIGN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.assign;
    try {
      try {
        jj_consume_token(ASSIGN);
      } catch (ParseException e) {
consumeUntil(sinc, e, "Assign");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Comma() throws ParseException, ParseEOFException {/*@bgen(jjtree) Comma */
 SimpleNode jjtn000 = new SimpleNode(JJTCOMMA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.comma;
    try {
      try {
        jj_consume_token(COMMA);
      } catch (ParseException e) {
consumeUntil(sinc, e, "Comma");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void OpenParen() throws ParseException, ParseEOFException {/*@bgen(jjtree) OpenParen */
 SimpleNode jjtn000 = new SimpleNode(JJTOPENPAREN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.openParen;
    try {
      try {
        jj_consume_token(OPEN_PAREN);
      } catch (ParseException e) {
consumeUntil(sinc, e, "OpenParen");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void CloseParen() throws ParseException, ParseEOFException {/*@bgen(jjtree) CloseParen */
 SimpleNode jjtn000 = new SimpleNode(JJTCLOSEPAREN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.closeParen;
    try {
      try {
        jj_consume_token(CLOSE_PAREN);
      } catch (ParseException e) {
consumeUntil(sinc, e, "CloseParen");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void OpenCurly() throws ParseException, ParseEOFException {/*@bgen(jjtree) OpenCurly */
 SimpleNode jjtn000 = new SimpleNode(JJTOPENCURLY);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.openCurly;
    try {
      try {
        jj_consume_token(OPEN_CURLY);
      } catch (ParseException e) {
consumeUntil(sinc, e, "OpenCurly");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void CloseCurly() throws ParseException, ParseEOFException {/*@bgen(jjtree) CloseCurly */
 SimpleNode jjtn000 = new SimpleNode(JJTCLOSECURLY);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.closeCurly;
    try {
      try {
        jj_consume_token(CLOSE_CURLY);
      } catch (ParseException e) {
consumeUntil(sinc, e, "CloseCurly");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void IfT() throws ParseException, ParseEOFException {/*@bgen(jjtree) IfT */
 SimpleNode jjtn000 = new SimpleNode(JJTIFT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.ifT;
    try {
      try {
        jj_consume_token(IF);
      } catch (ParseException e) {
consumeUntil(sinc, e, "IfT");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void ElseT() throws ParseException, ParseEOFException {/*@bgen(jjtree) ElseT */
 SimpleNode jjtn000 = new SimpleNode(JJTELSET);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.elseT;
    try {
      try {
        jj_consume_token(ELSE);
      } catch (ParseException e) {
consumeUntil(sinc, e, "ElseT");
      }
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  static final public void ElseIfT() throws ParseException, ParseEOFException {/*@bgen(jjtree) ElseIfT */
 SimpleNode jjtn000 = new SimpleNode(JJTELSEIFT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.elseIfT;
    try {
      try {
        jj_consume_token(ELSEIF);
      } catch (ParseException e) {
consumeUntil(sinc, e, "ElseIfT");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void While() throws ParseException, ParseEOFException {/*@bgen(jjtree) While */
 SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.whileT;
    try {
      try {
        jj_consume_token(WHILE);
      } catch (ParseException e) {
consumeUntil(sinc, e, "WhileT");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void For() throws ParseException, ParseEOFException {/*@bgen(jjtree) For */
 SimpleNode jjtn000 = new SimpleNode(JJTFOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.forT;
    try {
      try {
        jj_consume_token(FOR);
      } catch (ParseException e) {
consumeUntil(sinc, e, "ForT");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Int() throws ParseException, ParseEOFException {/*@bgen(jjtree) Int */
 SimpleNode jjtn000 = new SimpleNode(JJTINT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.intT;
    try {
      try {
        jj_consume_token(INT);
      } catch (ParseException e) {
consumeUntil(sinc, e, "IntT");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Float() throws ParseException, ParseEOFException {/*@bgen(jjtree) Float */
 SimpleNode jjtn000 = new SimpleNode(JJTFLOAT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.floatT;
    try {
      try {
        jj_consume_token(FLOAT);
      } catch (ParseException e) {
consumeUntil(sinc, e, "FloatT");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void String() throws ParseException, ParseEOFException {/*@bgen(jjtree) String */
 SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.stringT;
    try {
      try {
        jj_consume_token(STRING);
      } catch (ParseException e) {
consumeUntil(sinc, e, "StringT");
      }
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  static final public void Or() throws ParseException, ParseEOFException {/*@bgen(jjtree) Or */
 SimpleNode jjtn000 = new SimpleNode(JJTOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.or;
    try {
      try {
        jj_consume_token(OR);
      } catch (ParseException e) {
consumeUntil(sinc, e, "Or");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void And() throws ParseException, ParseEOFException {/*@bgen(jjtree) And */
 SimpleNode jjtn000 = new SimpleNode(JJTAND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.and;
    try {
      try {
        jj_consume_token(AND);
      } catch (ParseException e) {
consumeUntil(sinc, e, "And");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Equals() throws ParseException, ParseEOFException {/*@bgen(jjtree) Equals */
 SimpleNode jjtn000 = new SimpleNode(JJTEQUALS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.equals;
    try {
      try {
        jj_consume_token(EQUALS);
      } catch (ParseException e) {
consumeUntil(sinc, e, "Equals");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void LessThan() throws ParseException, ParseEOFException {/*@bgen(jjtree) LessThan */
 SimpleNode jjtn000 = new SimpleNode(JJTLESSTHAN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.lessThan;
    try {
      try {
        jj_consume_token(LESS_THAN);
      } catch (ParseException e) {
consumeUntil(sinc, e, "LessThan");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void GreaterThan() throws ParseException, ParseEOFException {/*@bgen(jjtree) GreaterThan */
 SimpleNode jjtn000 = new SimpleNode(JJTGREATERTHAN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.greaterThan;
    try {
      try {
        jj_consume_token(GREATER_THAN);
      } catch (ParseException e) {
consumeUntil(sinc, e, "GreaterThan");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Plus() throws ParseException, ParseEOFException {/*@bgen(jjtree) Plus */
 SimpleNode jjtn000 = new SimpleNode(JJTPLUS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.plus;
    try {
      try {
        jj_consume_token(PLUS);
      } catch (ParseException e) {
consumeUntil(sinc, e, "Plus");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Minus() throws ParseException, ParseEOFException {/*@bgen(jjtree) Minus */
 SimpleNode jjtn000 = new SimpleNode(JJTMINUS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.minus;
    try {
      try {
        jj_consume_token(MINUST);
      } catch (ParseException e) {
consumeUntil(sinc, e, "Minus");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Times() throws ParseException, ParseEOFException {/*@bgen(jjtree) Times */
 SimpleNode jjtn000 = new SimpleNode(JJTTIMES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.times;
    try {
      try {
        jj_consume_token(TIMES);
      } catch (ParseException e) {
consumeUntil(sinc, e, "Times");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Divided() throws ParseException, ParseEOFException {/*@bgen(jjtree) Divided */
 SimpleNode jjtn000 = new SimpleNode(JJTDIVIDED);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.divided;
    try {
      try {
        jj_consume_token(DIVIDED);
      } catch (ParseException e) {
consumeUntil(sinc, e, "Divided");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Number() throws ParseException, ParseEOFException  {/*@bgen(jjtree) Number */
 SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.number;
    try {
      try {
        jj_consume_token(NUM);
      } catch (ParseException e) {
consumeUntil(sinc, e, "Number");
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public SimpleNode Start() throws ParseException, ParseEOFException {/*@bgen(jjtree) Start */
 SimpleNode jjtn000 = new SimpleNode(JJTSTART);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.start;
    try {
      try {
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IF:
          case WHILE:
          case FOR:
          case INT:
          case FLOAT:
          case STRING:
          case ID:{
            ;
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          Statement();
        }
        jj_consume_token(EOF_TOKEN);
{if ("" != null) return jjtn000;}
      } catch (ParseException e) {
consumeUntil(sinc, e, "Start");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  static final public void Statement() throws ParseException {/*@bgen(jjtree) Statement */
 SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.statement;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case FLOAT:
        case STRING:{
          VariableDeclaration();
          break;
          }
        case ID:{
          Assignment();
          break;
          }
        case IF:{
          Conditional();
          break;
          }
        case WHILE:
        case FOR:{
          Loop();
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Semicolon();
      } catch (ParseException e) {
consumeUntil(sinc, e, "Statement");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void VariableDeclaration() throws ParseException {/*@bgen(jjtree) VariableDeclaration */
 SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.variableDeclaration;
    try {
      try {
        Type();
        VariableDeclarations();
      } catch (ParseException e) {
consumeUntil(sinc, e, "VariableDeclaration");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void VariableDeclarations() throws ParseException {/*@bgen(jjtree) VariableDeclarations */
 SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECLARATIONS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.variableDeclarations;
    try {
      try {
        Identifier();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASSIGN:{
          Assign();
          Expression();
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            break label_2;
          }
          Comma();
          Identifier();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ASSIGN:{
            Assign();
            Expression();
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            ;
          }
        }
      } catch (ParseException e) {
consumeUntil(sinc, e, "VariableDeclarations");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void MultiVariableAssignment() throws ParseException {/*@bgen(jjtree) MultiVariableAssignment */
 SimpleNode jjtn000 = new SimpleNode(JJTMULTIVARIABLEASSIGNMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.multiVariableAssignment;
    try {
      try {
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            break label_3;
          }
          Comma();
          Identifier();
        }
        Assign();
        Expression();
      } catch (ParseException e) {
consumeUntil(sinc, e, "MultiVariableAssignment");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Assignment() throws ParseException {/*@bgen(jjtree) Assignment */
 SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.assignment;
    try {
      try {
        Identifier();
        MultiVariableAssignment();
      } catch (ParseException e) {
consumeUntil(sinc, e, "Assignment");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Conditional() throws ParseException {/*@bgen(jjtree) Conditional */
 SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.conditional;
    try {
      try {
        IfT();
        OpenParen();
        Expression();
        CloseParen();
        OpenCurly();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IF:
          case WHILE:
          case FOR:
          case INT:
          case FLOAT:
          case STRING:
          case ID:{
            ;
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            break label_4;
          }
          Statement();
        }
        CloseCurly();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELSE:
        case ELSEIF:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ELSE:{
            Else();
            break;
            }
          case ELSEIF:{
            ElseIf();
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          ;
        }
      } catch (ParseException e) {
consumeUntil(sinc, e, "Conditional");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Else() throws ParseException {/*@bgen(jjtree) Else */
 SimpleNode jjtn000 = new SimpleNode(JJTELSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.elseNT;
    try {
      try {
        ElseT();
        OpenCurly();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IF:
          case WHILE:
          case FOR:
          case INT:
          case FLOAT:
          case STRING:
          case ID:{
            ;
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            break label_5;
          }
          Statement();
        }
        CloseCurly();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELSE:
        case ELSEIF:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ELSE:{
            Else();
            break;
            }
          case ELSEIF:{
            ElseIf();
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          ;
        }
      } catch (ParseException e) {
consumeUntil(sinc, e, "Else");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void ElseIf() throws ParseException {/*@bgen(jjtree) ElseIf */
 SimpleNode jjtn000 = new SimpleNode(JJTELSEIF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.elseIf;
    try {
      try {
        ElseIfT();
        OpenParen();
        Expression();
        CloseParen();
        OpenCurly();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IF:
          case WHILE:
          case FOR:
          case INT:
          case FLOAT:
          case STRING:
          case ID:{
            ;
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            break label_6;
          }
          Statement();
        }
        CloseCurly();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELSE:
        case ELSEIF:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ELSE:{
            Else();
            break;
            }
          case ELSEIF:{
            ElseIf();
            break;
            }
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          ;
        }
      } catch (ParseException e) {
consumeUntil(sinc, e, "ElseIf");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Loop() throws ParseException {/*@bgen(jjtree) Loop */
 SimpleNode jjtn000 = new SimpleNode(JJTLOOP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.loop;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WHILE:{
          While();
          break;
          }
        case FOR:{
          For();
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        OpenParen();
        Expression();
        CloseParen();
        OpenCurly();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IF:
          case WHILE:
          case FOR:
          case INT:
          case FLOAT:
          case STRING:
          case ID:{
            ;
            break;
            }
          default:
            jj_la1[16] = jj_gen;
            break label_7;
          }
          Statement();
        }
        CloseCurly();
      } catch (ParseException e) {
consumeUntil(sinc, e, "Loop");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Type() throws ParseException {/*@bgen(jjtree) Type */
 SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.type;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:{
          Int();
          break;
          }
        case FLOAT:{
          Float();
          break;
          }
        case STRING:{
          String();
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
consumeUntil(sinc, e, "Type");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void Expression() throws ParseException {/*@bgen(jjtree) Expression */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.expression;
    try {
      try {
        OrExpression();
      } catch (ParseException e) {
consumeUntil(sinc, e, "Expression");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void OrExpression() throws ParseException {/*@bgen(jjtree) OrExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTOREXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.orExpression;
    try {
      try {
        AndExpression();
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OR:{
            ;
            break;
            }
          default:
            jj_la1[18] = jj_gen;
            break label_8;
          }
          Or();
          AndExpression();
        }
      } catch (ParseException e) {
consumeUntil(sinc, e, "OrExpression");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void AndExpression() throws ParseException {/*@bgen(jjtree) AndExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTANDEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.andExpression;
    try {
      try {
        EqualityExpression();
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case AND:{
            ;
            break;
            }
          default:
            jj_la1[19] = jj_gen;
            break label_9;
          }
          And();
          EqualityExpression();
        }
      } catch (ParseException e) {
consumeUntil(sinc, e, "AndExpression");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void EqualityExpression() throws ParseException {/*@bgen(jjtree) EqualityExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTEQUALITYEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.equalityExpression;
    try {
      try {
        RelationalExpression();
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EQUALS:{
            ;
            break;
            }
          default:
            jj_la1[20] = jj_gen;
            break label_10;
          }
          Equals();
          RelationalExpression();
        }
      } catch (ParseException e) {
consumeUntil(sinc, e, "EqualityExpression");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void RelationalExpression() throws ParseException {/*@bgen(jjtree) RelationalExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTRELATIONALEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.relationalExpression;
    try {
      try {
        AdditiveExpression();
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LESS_THAN:
          case GREATER_THAN:{
            ;
            break;
            }
          default:
            jj_la1[21] = jj_gen;
            break label_11;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LESS_THAN:{
            LessThan();
            break;
            }
          case GREATER_THAN:{
            GreaterThan();
            break;
            }
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          AdditiveExpression();
        }
      } catch (ParseException e) {
consumeUntil(sinc, e, "RelationalExpression");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void AdditiveExpression() throws ParseException {/*@bgen(jjtree) AdditiveExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.additiveExpression;
    try {
      try {
        Term();
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PLUS:
          case MINUST:{
            ;
            break;
            }
          default:
            jj_la1[23] = jj_gen;
            break label_12;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PLUS:{
            Plus();
            break;
            }
          case MINUST:{
            Minus();
            break;
            }
          default:
            jj_la1[24] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          Term();
        }
      } catch (ParseException e) {
consumeUntil(sinc, e, "AdditiveExpression");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void Term() throws ParseException {/*@bgen(jjtree) Term */
 SimpleNode jjtn000 = new SimpleNode(JJTTERM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.term;
    try {
      try {
        Factor();
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TIMES:
          case DIVIDED:{
            ;
            break;
            }
          default:
            jj_la1[25] = jj_gen;
            break label_13;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TIMES:{
            Times();
            break;
            }
          case DIVIDED:{
            Divided();
            break;
            }
          default:
            jj_la1[26] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          Factor();
        }
      } catch (ParseException e) {
consumeUntil(sinc, e, "Term");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void Factor() throws ParseException {/*@bgen(jjtree) Factor */
 SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.factor;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUM:{
          Number();
          break;
          }
        case ID:{
          Identifier();
          break;
          }
        case OPEN_PAREN:{
          OpenParen();
          Expression();
          CloseParen();
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
consumeUntil(sinc, e, "Factor");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x3f20,0x3f20,0x8000,0x200000,0x8000,0x200000,0x3f20,0xc0,0xc0,0x3f20,0xc0,0xc0,0x3f20,0xc0,0xc0,0x300,0x3f20,0x1c00,0x1000000,0x800000,0x400000,0x6000000,0x6000000,0x18000000,0x18000000,0x60000000,0x60000000,0x86000,};
	}

  /** Constructor with InputStream. */
  public Compilador(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compilador(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new CompiladorTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Compilador(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new CompiladorTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new CompiladorTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Compilador(CompiladorTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[32];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 28; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 32; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
